// Code generated by MockGen. DO NOT EDIT.
// Source: es/es.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v7 "github.com/olivere/elastic/v7"
	reflect "reflect"
)

// MockElasticSearch is a mock of ElasticSearch interface
type MockElasticSearch struct {
	ctrl     *gomock.Controller
	recorder *MockElasticSearchMockRecorder
}

// MockElasticSearchMockRecorder is the mock recorder for MockElasticSearch
type MockElasticSearchMockRecorder struct {
	mock *MockElasticSearch
}

// NewMockElasticSearch creates a new mock instance
func NewMockElasticSearch(ctrl *gomock.Controller) *MockElasticSearch {
	mock := &MockElasticSearch{ctrl: ctrl}
	mock.recorder = &MockElasticSearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockElasticSearch) EXPECT() *MockElasticSearchMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockElasticSearch) Index(name, typ, ID string, body interface{}) (*v7.IndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", name, typ, ID, body)
	ret0, _ := ret[0].(*v7.IndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index
func (mr *MockElasticSearchMockRecorder) Index(name, typ, ID, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockElasticSearch)(nil).Index), name, typ, ID, body)
}

// Get mocks base method
func (m *MockElasticSearch) Get(name, typ, ID string) (*v7.GetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name, typ, ID)
	ret0, _ := ret[0].(*v7.GetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockElasticSearchMockRecorder) Get(name, typ, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockElasticSearch)(nil).Get), name, typ, ID)
}

// SearchByTag mocks base method
func (m *MockElasticSearch) SearchByTag(index, typ, tag, date string) (*v7.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByTag", index, typ, tag, date)
	ret0, _ := ret[0].(*v7.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByTag indicates an expected call of SearchByTag
func (mr *MockElasticSearchMockRecorder) SearchByTag(index, typ, tag, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByTag", reflect.TypeOf((*MockElasticSearch)(nil).SearchByTag), index, typ, tag, date)
}
